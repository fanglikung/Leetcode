#1. Two sum #like SQL
create table nums(
    k int,
    k2 int,
    n int,
    primary key(k,k2)
); -- []
create index on nums(n); -- {}

insert int nums(k,n)values
    (0,2),
    (1,7),
    (2,11),
    (3,15);

select a.k,b.k
from nums a
join nums b
where b.n=target-a.n and a.k!=b.k;

select
    a.k,
    (select b.k from b where b.n=target-a.n)
from nums a;
#1. Two sum #fangli
class Solution(object):
    def twoSum(self, nums, target):
        d={}
        for i in range(len(nums)):
            d[nums[i]]=i
        for i in range(len(nums)):
            if target-nums[i] in d and d[target-nums[i]]!=i:
                return[i,d[target-nums[i]]]
#1. Two sum #baby version # dictionary like SQL index
class Solution(object):
    def twoSum(self, nums, target):
        d={}
        for i in range(len(nums)):
            d[nums[i]]=i
        return[
            [i,d[target-nums[i]]]
            for i in range(len(nums))
            if target-nums[i] in d and d[target-nums[i]]!=i
        ][0]
print(Solution().twoSum([2,7,11,15],9))
#9. Palindrome Number##string
class Solution:
    def isPalindrome(self, x: int) -> bool:
        y=str(x)
        if x<0 :
            return 0
        elif len(y)==1:
            return 1
        else:
            for i in range(len(y)//2):
                if y[i]!=y[len(y)-1-i]: 
                    return 0 
            return 1       
#9. Palindrome Number##int
class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x<0 :
            return 0
        elif x==0:
            return 1  
        else:
            y=int(math.log(x,10))
            for i in range(0,y+1):
                if (x//(10**i)%10)!=(x//(10**(y-i))%10): 
                    return 0 
            return 1      
#9. Palindrome Number##fastest
class Solution:
    def isPalindrome(self, x: int) -> bool:
        return str(x)[::-1] == str(x)
            return 1

#9. Palindrome Number##baby version
class Solution:
    def isPalindrome(self, x: int) -> bool:
        try:
            y=int(math.log(x,10))
            return all(
                (x//(10**i)%10)==(x//(10**(y-i))%10) ##all ()全稱量化，每一個結果檢查一次。 any()存在量化
                for i in range((y+1)//2)
            )
        except ValueError:
            return x==0
#13. Roman to Integer
class Solution:
    def romanToInt(self, s: str) -> int:
        d={'I':1,'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000}
        return sum(
            (1 if d[s[i]]>=d[s[i+1]] else -1)*d[s[i]]
            for i in range(len(s)-1)
        )+d[s[-1]]


#14. Longest Common Prefix #baby (炫炮版)
class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        s0=strs[0]
        l=len(s0)
        return s0[:next(
            i
            for i in range(l+1)
            if any(not(i<min(l,len(s)) and s0[i]==s[i])for s in strs)
        )]
#14. Longest Common Prefix #baby
class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        i=0
        try:
            while all(strs[0][i]==s[i]for s in strs):
                i+=1
        except IndexError:
            pass
        return strs[0][:i]
#14. Longest Common Prefix #baby
class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        try:
            for i in range(len(strs[0])):
                if any(strs[0][i]!=strs[j][i]for j in range(len(strs))):
                    return strs[0][:i]
            return strs[0]
        except IndexError:
            return strs[0][:i]

#14. Longest Common Prefix #fangli
class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        try:
            for i in range(len(strs[0])):
                for j in range(len(strs)):
                    if strs[0][i]!=strs[j][i]:
                        return strs[0][0:i]
            return strs[0]    
        except IndexError:
            return strs[0][0:i]  
#20. Valid Parentheses
class Solution:
    def isValid(self, s: str) -> bool:
        d={'(':')','[':']','{':'}'}
        l=[]
        for i in s:
            if l and d[l[-1]]==i:
                l.pop()
            elif i in d:
                l.append(i)
            else:
                return 0
        return not l
