-- Table: Activity

-- +--------------+---------+
-- | Column Name  | Type    |
-- +--------------+---------+
-- | player_id    | int     |
-- | device_id    | int     |
-- | event_date   | date    |
-- | games_played | int     |
-- +--------------+---------+
-- (player_id, event_date) is the primary key of this table.
-- This table shows the activity of players of some game.
-- Each row is a record of a player who logged in and played a number of games (possibly 0) 
-- before logging out on some day using some device.
 

-- Write an SQL query that reports the fraction of players that logged in again 
-- on the day after the day they first logged in, rounded to 2 decimal places. 
-- In other words, you need to count the number of players that logged in for at least two consecutive 
-- days starting from their first login date, then divide that number by the total number of players.

-- The query result format is in the following example:

-- Activity table:
-- +-----------+-----------+------------+--------------+
-- | player_id | device_id | event_date | games_played |
-- +-----------+-----------+------------+--------------+
-- | 1         | 2         | 2016-03-01 | 5            |
-- | 1         | 2         | 2016-03-02 | 6            |
-- | 2         | 3         | 2017-06-25 | 1            |
-- | 3         | 1         | 2016-03-02 | 0            |
-- | 3         | 4         | 2018-07-03 | 5            |
-- +-----------+-----------+------------+--------------+

-- Result table:
-- +-----------+
-- | fraction  |
-- +-----------+
-- | 0.33      |
-- +-----------+
-- Only the player with id 1 logged back in after the first day he had logged in so the answer is 1/3 = 0.33

-- #1 solution
--#sql server
select 
round(cast(cast(sum(case when t1.diff=1 then 1 else 0 end)as decimal(9,2)) /count(distinct t1.player_id ) as decimal(9,2)),2)
from(
	SELECT player_id,
	DATEdiff(day,[event_date],lead([event_date])over(partition by [player_id]order by [event_date]asc)) as diff
	FROM [master].[dbo].[550_activity]
	)t1

-- #2 solution
-- # mysql
Select round(count(distinct player_id)/(select count(distinct player_id) from 550_activity),2)fraction
from(
select player_id,event_date-row_number()over(partition by player_id order by event_date) n from 550_activity )a
group by player_id,n
Having count(*)>1;


-- create table
-- Create table 550_activity(player_id     int,
-- device_id     int     ,
-- event_date    date    ,
-- games_played  int   ,
-- Primary key (player_id, event_date));
-- Insert into 534_activity values
-- ( 1         , 2         , '2016-03-01' , 5            ),
-- ( 1         , 2         , '2016-03-02' , 6            ),
-- ( 2         , 3         , '2017-06-25' , 1            ),
-- ( 3         , 1         , '2016-03-02' , 0            )
-- ( 3         , 4         , '2018-07-03' , 5 );



