-- Table: Users

-- +----------------+---------+
-- | Column Name    | Type    |
-- +----------------+---------+
-- | user_id        | int     |
-- | join_date      | date    |
-- | favorite_brand | varchar |
-- +----------------+---------+
-- user_id is the primary key of this table.
-- This table has the info of the users of an online shopping website where users can sell and buy items.

-- Table: Orders

-- +---------------+---------+
-- | Column Name   | Type    |
-- +---------------+---------+
-- | order_id      | int     |
-- | order_date    | date    |
-- | item_id       | int     |
-- | buyer_id      | int     |
-- | seller_id     | int     |
-- +---------------+---------+
-- order_id is the primary key of this table.
-- item_id is a foreign key to the Items table.
-- buyer_id and seller_id are foreign keys to the Users table.


-- Table: Items

-- +---------------+---------+
-- | Column Name   | Type    |
-- +---------------+---------+
-- | item_id       | int     |
-- | item_brand    | varchar |
-- +---------------+---------+
-- item_id is the primary key of this table.

-- Write an SQL query to find for each user, whether the brand of the second item (by date) they sold is their favorite brand. If a user sold less than two items, report the answer for that user as no.

-- It is guaranteed that no seller sold more than one item on a day.

-- The query result format is in the following example:

-- Users table:
-- +---------+------------+----------------+
-- | user_id | join_date  | favorite_brand |
-- +---------+------------+----------------+
-- | 1       | 2019-01-01 | Lenovo         |
-- | 2       | 2019-02-09 | Samsung        |
-- | 3       | 2019-01-19 | LG             |
-- | 4       | 2019-05-21 | HP             |
-- +---------+------------+----------------+

-- Orders table:
-- +----------+------------+---------+----------+-----------+
-- | order_id | order_date | item_id | buyer_id | seller_id |
-- +----------+------------+---------+----------+-----------+
-- | 1        | 2019-08-01 | 4       | 1        | 2         |
-- | 2        | 2019-08-02 | 2       | 1        | 3         |
-- | 3        | 2019-08-03 | 3       | 2        | 3         |
-- | 4        | 2019-08-04 | 1       | 4        | 2         |
-- | 5        | 2019-08-04 | 1       | 3        | 4         |
-- | 6        | 2019-08-05 | 2       | 2        | 4         |
-- +----------+------------+---------+----------+-----------+

-- Items table:
-- +---------+------------+
-- | item_id | item_brand |
-- +---------+------------+
-- | 1       | Samsung    |
-- | 2       | Lenovo     |
-- | 3       | LG         |
-- | 4       | HP         |
-- +---------+------------+

-- Result table:
-- +-----------+--------------------+
-- | seller_id | 2nd_item_fav_brand |
-- +-----------+--------------------+
-- | 1         | no                 |
-- | 2         | yes                |
-- | 3         | yes                |
-- | 4         | no                 |
-- +-----------+--------------------+

-- The answer for the user with id 1 is no because they sold nothing.
-- The answer for the users with id 2 and 3 is yes because the brands of their second sold items are their favorite brands.
-- The answer for the user with id 4 is no because the brand of their second sold item is not their favorite brand.


-- #1 solution
--#sql server
select  user_id seller_id,
		case when i.item_id=o.[item_id] then 'yes' else 'no'end as '2nd_item_fav_brand' 
from [159_users]	u
left join(
select [item_id]
      ,[seller_id]
from(
	SELECT [item_id]
		  ,[seller_id]
		  ,rank()over(partition by seller_id order by order_date asc) r
	 FROM [master].[dbo].[1159_orders]
	 )a
	 where a.r=2
  )o
on u.user_id=o.seller_id
left join [1159_items]i
on i.item_brand =u.favorite_brand

-- #2 solution
-- # mysql
Select seller_id, max(case when r=2 and item1=item2 then 'yes' else 'no' end )as 2nd_item_fav_brand
from(select u.user_id as seller_id, 
	o.order_date,
	rank()over(partition by o.seller_id order by o.order_date asc)r,
	o.item_id item1,
	i.item_id item2 
from 1159_users u
left join 1159_orders o
on o.seller_id=u.user_id
left join 1159_items i
on i.item_brand =u.favorite_brand)a
group by seller_id;

create table 1159_users
(user_id int,
join_date date,
favorite_brand varchar(10),
primary key(user_id));

insert into 1159_users values
(1       ,'2019-01-01','Lenovo'        ),
(2       ,'2019-02-09','Samsung'        ),
(3       ,'2019-01-19','LG'             ),
(4       ,'2019-05-21' , 'HP' );
create table 1159_items
(item_id int,
item_brand varchar(10),
primary key(item_id));

insert into 1159_items values
(1       ,'Samsung'),
(2      , 'Lenovo'     ),
(3       ,'LG'        ),
(4       ,'HP');

create table 1159_orders
(order_id       int     ,
order_date     date    ,
item_id        int     ,
buyer_id       int     ,
seller_id      int ,
CONSTRAINT pk_1159_orders_order_id primary key(order_id),
index(item_id),
CONSTRAINT fk_1159_orders_item_id_1159_items_item_id foreign key(item_id) references 1159_items(item_id)ON UPDATE CASCADE ON DELETE CASCADE,
index(buyer_id),
CONSTRAINT fk_1159_orders_buyer_id_1159_items_user_id foreign key(buyer_id) references 1159_users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
index(seller_id),
CONSTRAINT fk_1159_orders_seller_id_1159_items_user_id foreign key(seller_id) references 1159_users(user_id)ON UPDATE CASCADE ON DELETE CASCADE);
insert into 1159_orders values
(1        ,'2019-08-01' , 4       , 1        , 2         ),
(2        ,'2019-08-02' , 2       , 1        , 3         ),
(3        ,'2019-08-03' , 3       , 2        , 3         ),
(4        ,'2019-08-04' , 1       , 4        , 2         ),
(5        ,'2019-08-04' , 1       , 3        , 4         ),
(6        ,'2019-08-05' , 2       , 2        , 4);