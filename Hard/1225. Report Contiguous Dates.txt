-- Table: Failed

-- +--------------+---------+
-- | Column Name  | Type    |
-- +--------------+---------+
-- | fail_date    | date    |
-- +--------------+---------+
-- Primary key for this table is fail_date.
-- Failed table contains the days of failed tasks.
-- Table: Succeeded

-- +--------------+---------+
-- | Column Name  | Type    |
-- +--------------+---------+
-- | success_date | date    |
-- +--------------+---------+
-- Primary key for this table is success_date.
-- Succeeded table contains the days of succeeded tasks.
 

-- A system is running one task every day. Every task is independent of the previous tasks. The tasks can fail or succeed.

-- Write an SQL query to generate a report of period_state for each continuous interval of days in the period from 2019-01-01 to 2019-12-31.

-- period_state is 'failed' if tasks in this interval failed or 'succeeded' if tasks in this interval succeeded. Interval of days are retrieved as start_date and end_date.

-- Order result by start_date.

-- The query result format is in the following example:

-- Failed table:
-- +-------------------+
-- | fail_date         |
-- +-------------------+
-- | 2018-12-28        |
-- | 2018-12-29        |
-- | 2019-01-04        |
-- | 2019-01-05        |
-- +-------------------+

-- Succeeded table:
-- +-------------------+
-- | success_date      |
-- +-------------------+
-- | 2018-12-30        |
-- | 2018-12-31        |
-- | 2019-01-01        |
-- | 2019-01-02        |
-- | 2019-01-03        |
-- | 2019-01-06        |
-- +-------------------+

-- Result table:
-- +--------------+--------------+--------------+
-- | period_state | start_date   | end_date     |
-- +--------------+--------------+--------------+
-- | succeeded    | 2019-01-01   | 2019-01-03   |
-- | failed       | 2019-01-04   | 2019-01-05   |
-- | succeeded    | 2019-01-06   | 2019-01-06   |
-- +--------------+--------------+--------------+

-- The report ignored the system state in 2018 as we care about the system in the period 2019-01-01 to 2019-12-31.
-- From 2019-01-01 to 2019-01-03 all tasks succeeded and the system state was "succeeded".
-- From 2019-01-04 to 2019-01-05 all tasks failed and system state was "failed".
-- From 2019-01-06 to 2019-01-06 all tasks succeeded and system state was "succeeded".

#solution 1
#SQL Server
select period_state,
		min(d)  as start_date,
		max(d)  as end_date
from(
	select *,
			sum(diff)over(order by d) su
	from(select *,
	lag(period_state)over(order by d) last_date,
	case when lag(period_state)over(order by d)=period_state then 0 else 1 end as diff
	from(SELECT
			'secceeded' as period_state ,
			[success_date] as d
		FROM [master].[dbo].[1225_succeeded]
		where [success_date] between '2019-01-01' and '2019-12-31'
	union
		SELECT
		'failed' as period_state ,
		[fail_date] as d
		FROM [master].[dbo].[1225_failed]
		where [fail_date] between '2019-01-01' and '2019-12-31'
		)a
	)b
)c
group by 
	period_state,
	su
#solution 1
#MySQL
with t1 as(
select min(success_date) as start_date, max(success_date) as end_date, state
from(
select *, date_sub(success_date, interval row_number() over(order by success_date) day) as diff, 1 as state
from 1225_succeeded
where success_date between "2019-01-01" and "2019-12-31") a
group by diff),

t2 as(
select min(fail_date) as start_date, max(fail_date) as end_date, state
from(
select *, date_sub(fail_date, interval row_number() over(order by fail_date) day) as diff, 0 as state
from 1225_failed
where fail_date between "2019-01-01" and "2019-12-31") b
group by diff)
select *
from t1
union all
select *
from t2;


create table 1225_failed
(fail_date date,
primary key(fail_date));
insert into 1225_failed values
('2018-12-28'        ),
('2018-12-29'        ),
('2019-01-04'        ),
('2019-01-05' );

create table 1225_succeeded
(success_date date,
primary key(success_date));
insert into 1225_succeeded values
('2018-12-30'        ),
('2018-12-31'        ),
('2019-01-01'        ),
('2019-01-02'        ),
('2019-01-03'        ),
('2019-01-06');