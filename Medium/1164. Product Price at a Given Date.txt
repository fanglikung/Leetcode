-- Table: Products

-- +---------------+---------+
-- | Column Name   | Type    |
-- +---------------+---------+
-- | product_id    | int     |
-- | new_price     | int     |
-- | change_date   | date    |
-- +---------------+---------+
-- (product_id, change_date) is the primary key of this table.
-- Each row of this table indicates that the price of some product was changed to a new price at some date.

-- Write an SQL query to find the prices of all products on 2019-08-16. Assume the price of all products before any change is 10.

-- The query result format is in the following example:

-- Products table:
-- +------------+-----------+-------------+
-- | product_id | new_price | change_date |
-- +------------+-----------+-------------+
-- | 1          | 20        | 2019-08-14  |
-- | 2          | 50        | 2019-08-14  |
-- | 1          | 30        | 2019-08-15  |
-- | 1          | 35        | 2019-08-16  |
-- | 2          | 65        | 2019-08-17  |
-- | 3          | 20        | 2019-08-18  |
-- +------------+-----------+-------------+

-- Result table:
-- +------------+-------+
-- | product_id | price |
-- +------------+-------+
-- | 2          | 50    |
-- | 1          | 35    |
-- | 3          | 10    |
-- +------------+-------+


#1 solution
#SQL server
SELECT product_id
      ,case when change_date<='2019-08-16' then new_price else 10 end as price 
from(
SELECT product_id
      ,new_price
      ,change_date
	  ,rank()over(partition by product_id order by change_date desc) as r
  FROM 1164_products
  )a
  where a.r=1

#1 solution
#mysql

Select p.product_id,ifnull(new_price,10) price
From (select distinct product_id
from 1164_products) p
Left join (Select product_id,new_price,change_date From 1164_products
Where (product_id,change_date) in (select product_id,max(change_date) change_date from 1164_products  where change_date<='2019-08-16' group by product_id)
)a
on p.product_id=a.product_id ;

#2 solution
#mysql
select * from (
    select product_id, new_price as price from Products
        where (product_id, change_date) in (
            select product_id, max(change_date) from Products
                where change_date <= '2019-08-16'
                group by product_id
        )
    union
        select distinct product_id, 10 as price from Products
            where product_id not in (
                select product_id from Products
                    where change_date <= '2019-08-16'
            )
    ) union_result;

Create table 1164_products
(product_id int,
new_price int,
change_date date,
Primary key (product_id, change_date));

Insert into 1164_products values
(1,          20        , '2019-08-14'  ),
(2,           50        , '2019-08-14'  ),
(1,           30        , '2019-08-15'  ),
(1,          35        , '2019-08-16'  ),
(2,           65        , '2019-08-17'  ),
(3,           20        , '2019-08-18' );