-- Table point_2d holds the coordinates (x,y) of some unique points (more than two) in a plane.
 

-- Write a query to find the shortest distance between these points rounded to 2 decimals.
 

-- | x  | y  |
-- |----|----|
-- | -1 | -1 |
-- | 0  | 0  |
-- | -1 | -2 |
-- The shortest distance is 1.00 from point (-1,-1) to (-1,2). So the output should be:
 

-- | shortest |
-- |----------|
-- | 1.00     |
 

-- Note: The longest distance among all the points are less than 10000.



#1 solution
#SQL Server
SELECT min(SQRT(abs(p1.[x]-p2.[x])*abs(p1.[x]-p2.[x])+ abs(p1.[y]-p2.[y])*abs(p1.[y]-p2.[y]))) as shortest 
  FROM [master].[dbo].[612_point_2d] p1
  cross join [8612_point_2d] p2
  where  p1.x!=p2.x or p1.y!=p2.y


#1 solution
#mysql
Select SQRT(abs(p1.x-p2.x)*abs(p1.x-p2.x)+abs(p1.y-p2.y)*abs(p1.y-p2.y)) shortest
From 612_point_2d p1
Cross join 612_point_2d p2
Where p1.x!=p2.x or p1.y!=p2.y
Order by shortest asc
Limit 1;

Create table 612_point_2d
(x int,
y int);
Insert into 612_point_2d values
(-1 , -1 ),
(0  , 0  ),
(-1 , -2);