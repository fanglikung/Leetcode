-- Table: Friendship

-- +---------------+---------+
-- | Column Name   | Type    |
-- +---------------+---------+
-- | user1_id      | int     |
-- | user2_id      | int     |
-- +---------------+---------+
-- (user1_id, user2_id) is the primary key for this table.
-- Each row of this table indicates that there is a friendship relation between user1_id and user2_id.


-- Table: Likes

-- +-------------+---------+
-- | Column Name | Type    |
-- +-------------+---------+
-- | user_id     | int     |
-- | page_id     | int     |
-- +-------------+---------+
-- (user_id, page_id) is the primary key for this table.
-- Each row of this table indicates that user_id likes page_id.


-- Write an SQL query to recommend pages to the user with user_id = 1 using the pages that your friends liked. It should not recommend pages you already liked.

-- Return result table in any order without duplicates.

-- The query result format is in the following example:

-- Friendship table:
-- +----------+----------+
-- | user1_id | user2_id |
-- +----------+----------+
-- | 1        | 2        |
-- | 1        | 3        |
-- | 1        | 4        |
-- | 2        | 3        |
-- | 2        | 4        |
-- | 2        | 5        |
-- | 6        | 1        |
-- +----------+----------+



-- Likes table:
-- +---------+---------+
-- | user_id | page_id |
-- +---------+---------+
-- | 1       | 88      |
-- | 2       | 23      |
-- | 3       | 24      |
-- | 4       | 56      |
-- | 5       | 11      |
-- | 6       | 33      |
-- | 2       | 77      |
-- | 3       | 77      |
-- | 6       | 88      |
-- +---------+---------+


-- Result table:
-- +------------------+
-- | recommended_page |
-- +------------------+
-- | 23               |
-- | 24               |
-- | 56               |
-- | 33               |
-- | 77               |
-- +------------------+
-- User one is friend with users 2, 3, 4 and 6.
-- Suggested pages are 23 from user 2, 24 from user 3, 56 from user 3 and 33 from user 6.
-- Page 77 is suggested from both user 2 and user 3.
-- Page 88 is not suggested because user 1 already likes it.

#1 solution 
#SQL server
with f as (
SELECT [user1_id]
      ,[user2_id]
FROM [master].[dbo].[1264_friendship] 
  union 
select [user2_id]
      ,[user1_id]
from [master].[dbo].[1264_friendship])

SELECT distinct t. recommended_page
from(
SELECT [user1_id]
      ,[user2_id]
	  ,l1.page_id
	  ,l2.page_id recommended_page 
  FROM  f
  left join [1264_likes] l1
  on f.user1_id=l1.user_id
  left join [1264_likes] l2
  on f.user2_id=l2.user_id
  ) t
  where [user1_id]=1 and t.page_id!=t.recommended_page 


#2 solution 
#SQL server
select distinct page_id as recommended_page
from [1264_likes]
where user_id 
in (select user2_id as id
from [1264_friendship]
where user1_id = 1 --or user2_id = 1 and user2_id !=1
union all
select user1_id
from [1264_friendship]
where user2_id = 1) 
and page_id not in (select page_id from [84_likes] where user_id = 1)

#1 solution
#mysql

Select distinct page_id recommended_page
from(
Select case when user1_id=1 then user2_id
            when user2_id=1 then user1_id end as user_id
From 1264_friendship
)a
Inner join 1264_likes l
On a.user_id=l.user_id
Where page_id not in (select page_id from 1264_likes where user_id=1)
Order by page_id asc;


#1 solution
#mysql

Select distinct page_id recommended_page
from(
Select user1_id as user_id
From 1264_friendship
Where user2_id=1
Union
Select user2_id
From 1264_friendship
Where user1_id=1
)a
Left join 1264_likes l
On a.user_id=l.user_id
Where page_id not in (select page_id from 1264_likes where user_id=1)
Order by page_id asc;


Create table 1264_friendship
(user1_id int,
user2_id int,
Primary key(user1_id,user2_id));

Insert into 1264_friendship values
(1        , 2        ),
(1        , 3    ),
(1        , 4      ),
(2        , 3      ),
(2        , 4      ),
(2        , 5        ),
(6        , 1  );

Create table 1264_likes(
user_id int,
page_id int,
Primary key(user_id, page_id));

Insert into 1264_likes values
(1       , 88      ),
( 2       , 23      ),
( 3       , 24      ),
( 4       , 56      ),
( 5       , 11      ),
( 6       , 33      ),
( 2       , 77      ),
( 3       , 77      ),
(6       , 88 );